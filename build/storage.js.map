{"version":3,"sources":["storage.js"],"names":["selectors","render","getCitiesFromStorage","storageName","cities","localStorage","getItem","JSON","parse","list","setItem","stringify","citiesInStorage","City","constructor","cityName","name","searchTimes","favorite","searchCity","city","find","obj","isCityFavorite","updateCity","alreadyExistCity","isFavorite","addCity","push","addCityActivity","checkIsCityInFavorites","renderCities","clearStorage","removeItem","window","location","pathname"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,OAAO,KAAKC,MAAZ,MAAyB,aAAzB;AACA;;;AAIA;AACA;AACA;;;AAGA,MAAMC,uBAAwBC,WAAD,IAAiB;AAC5C,MAAIC,SAAS,EAAb;AACA,MAAGC,aAAaC,OAAb,CAAqBH,WAArB,CAAH,EAAsC;AACpCC,aAASG,KAAKC,KAAL,CAAWH,aAAaC,OAAb,CAAqBH,WAArB,CAAX,CAAT;AACD,GAFD,MAGK;AACHC,WAAOK,IAAP,GAAc,EAAd;AACAJ,iBAAaK,OAAb,CAAqBP,WAArB,EAAkCI,KAAKI,SAAL,CAAgBP,MAAhB,CAAlC;AACD;AACD,SAAOA,MAAP;AACD,CAVD;;AAYA,MAAMD,cAAc,iBAApB;AACA,OAAO,MAAMS,kBAAkBV,qBAAqBC,WAArB,CAAxB;;AAIP,MAAMU,IAAN,CAAW;AACTC,cAAYC,QAAZ,EAAsB;AACpB,SAAKC,IAAL,GAAYD,QAAZ;AACA,SAAKE,WAAL,GAAmB,CAAnB;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACD;AALQ;;AAQX;AACA,OAAO,MAAMC,aAAcC,IAAD,IAAU;AAClC,SAAOR,gBAAgBH,IAAhB,CAAqBY,IAArB,CAA2BC,GAAD,IAAS;AAAE,WAAOA,IAAIN,IAAJ,KAAaI,IAApB;AAA2B,GAAhE,CAAP;AACD,CAFM;AAGP,OAAO,MAAMG,iBAAkBH,IAAD,IAAU;AACtC,MAAIE,MAAMH,WAAWC,IAAX,CAAV;AACA,SAAQE,GAAD,GAASA,IAAIJ,QAAJ,IAAgB,IAAzB,GAAiC,KAAxC;AACD,CAHM;;AAKP,MAAMM,aAAa,CAACC,gBAAD,EAAmBC,UAAnB,KAAkC;AACnD;AACA,MAAG,CAACA,UAAJ,EAAgB;AACdD,qBAAiBR,WAAjB;AACD,GAFD,MAGM;AACH,YAAOS,UAAP;AACE,WAAK,KAAL;AAAeA,qBAAa,IAAb,CAAoB;AACnC,WAAK,QAAL;AAAeA,qBAAa,KAAb,CAAoB;AACnC;AAAeA,qBAAa,KAAb,CAAoB;AAHrC;AAKDD,qBAAiBP,QAAjB,GAA4BQ,UAA5B;AACD;AACDrB,eAAaK,OAAb,CAAqBP,WAArB,EAAkCI,KAAKI,SAAL,CAAgBC,eAAhB,CAAlC;AACD,CAdD;AAeA,MAAMe,UAAWP,IAAD,IAAU;AACxBR,kBAAgBH,IAAhB,CAAqBmB,IAArB,CAA0B,IAAIf,IAAJ,CAASO,IAAT,CAA1B;AACAf,eAAaK,OAAb,CAAqBP,WAArB,EAAkCI,KAAKI,SAAL,CAAgBC,eAAhB,CAAlC;AACD,CAHD;;AAKA,OAAO,MAAMiB,kBAAkB,CAACT,IAAD,EAAOM,UAAP,KAAsB;AACnD,MAAID,mBAAmBN,WAAWC,IAAX,CAAvB;AACCK,kBAAD,GAAqBD,WAAWC,gBAAX,EAA6BC,UAA7B,CAArB,GAAgEC,QAAQP,IAAR,CAAhE;AACAnB,SAAO6B,sBAAP,CAA8BV,IAA9B;AACAnB,SAAO8B,YAAP;AACD,CALM;;AAOP,OAAO,MAAMC,eAAe,MAAM;AAChC3B,eAAa4B,UAAb,CAAwB9B,WAAxB;AACA+B,SAAOC,QAAP,GAAkBD,OAAOC,QAAP,CAAgBC,QAAlC;AACD,CAHM","file":"storage.js","sourcesContent":["import { selectors } from './inc/_selectors.js'\r\nimport * as render  from './render.js'\r\n//view cities in recent and in favorite blocks\r\n\r\n\r\n\r\n//build button - add to favorites\r\n//button clear recent \r\n//button clear favorites\r\n\r\n\r\nconst getCitiesFromStorage = (storageName) => {\r\n  let cities = {};\r\n  if(localStorage.getItem(storageName)) {\r\n    cities = JSON.parse(localStorage.getItem(storageName));\r\n  }\r\n  else {\r\n    cities.list = []; \r\n    localStorage.setItem(storageName, JSON.stringify( cities ));\r\n  }\r\n  return cities;\r\n}\r\n\r\nconst storageName = \"citiesInStorage\";\r\nexport const citiesInStorage = getCitiesFromStorage(storageName);\r\n\r\n\r\n\r\nclass City {\r\n  constructor(cityName) {\r\n    this.name = cityName;\r\n    this.searchTimes = 1;\r\n    this.favorite = false;\r\n  }\r\n}\r\n\r\n//operations with cities\r\nexport const searchCity = (city) => {\r\n  return citiesInStorage.list.find((obj) => { return obj.name === city; });\r\n}\r\nexport const isCityFavorite = (city) => {\r\n  let obj = searchCity(city);\r\n  return (obj) ? (obj.favorite == true) : false;\r\n}\r\n\r\nconst updateCity = (alreadyExistCity, isFavorite) => {\r\n  debugger\r\n  if(!isFavorite) { \r\n    alreadyExistCity.searchTimes++; \r\n  }\r\n   else {\r\n     switch(isFavorite) {\r\n       case \"add\":    isFavorite = true;  break;\r\n       case \"remove\": isFavorite = false; break;\r\n       default:       isFavorite = false; break;\r\n     }\r\n    alreadyExistCity.favorite = isFavorite;\r\n  }\r\n  localStorage.setItem(storageName, JSON.stringify( citiesInStorage ));\r\n}\r\nconst addCity = (city) => {\r\n  citiesInStorage.list.push(new City(city));\r\n  localStorage.setItem(storageName, JSON.stringify( citiesInStorage ));\r\n}\r\n\r\nexport const addCityActivity = (city, isFavorite) => {\r\n  let alreadyExistCity = searchCity(city);\r\n  (alreadyExistCity) ? updateCity(alreadyExistCity, isFavorite) : addCity(city);\r\n  render.checkIsCityInFavorites(city);\r\n  render.renderCities();\r\n}\r\n\r\nexport const clearStorage = () => {\r\n  localStorage.removeItem(storageName);\r\n  window.location = window.location.pathname;\r\n}"]}