{"version":3,"sources":["listen.js"],"names":["selectors","storage","degrees","isInputPopulate","request","render","urlCity","isCityInUrl","favoriteWrapper","style","display","mainBlock","input","value","searchWeather","renderWeather","$","cityAutocomplete","show_country","autocomplete","document","querySelector","visibility","addEventListener","event","autocompleteCity","path","classList","contains","target","innerText","firstChild","length","console","log","populateCityToUrl","blur","keyCode","inputCity","buttonAddToFavorites","city","isCityFavorite","addCityActivity","renderModalPopup","buttonClearActivity","clearStorage","forecastBlock","modifyTodayBlock","focus","select","history","pushState","newurl","window","location","origin","pathname","cityFromUrl","decodeURI","search","substring"],"mappings":"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","file":"listen.js","sourcesContent":["import { selectors } from './inc/_selectors.js'\r\nimport * as storage  from './storage.js'\r\n\r\nconst degrees = \"celsius\";\r\n\r\n\r\nexport const isInputPopulate = (request, render) => {\r\n  let urlCity = isCityInUrl();\r\n  if (urlCity) {\r\n    selectors.favoriteWrapper.style.display = \"block\";\r\n    selectors.mainBlock.style.display       = \"block\";\r\n    selectors.input.value = urlCity; //inputValue\r\n    request.searchWeather(urlCity, degrees, render.renderWeather);\r\n  } \r\n\r\n  //https://github.com/zhem4ag/jquery_cityAutocomplete\r\n  $('input.search').cityAutocomplete({ /* show_state: true, */ show_country: true});\r\n  const autocomplete = document.querySelector(\"div.city-autocomplete\");\r\n  autocomplete.style.visibility = \"inherit\";\r\n\r\n  autocomplete.addEventListener(\"click\", (event) => {  \r\n    let autocompleteCity = \"\";\r\n      if(event.path[0].classList.contains(\"city\") ) {\r\n        autocompleteCity = event.target.innerText; //inputValue\r\n      }else {\r\n        autocompleteCity = event.path[0].firstChild.innerText; //inputValue\r\n      }\r\n      if(autocompleteCity.length == 0) { \r\n        console.log(\"you dont type city\"); return;\r\n      } else {\r\n        populateCityToUrl(autocompleteCity);\r\n        selectors.input.blur();\r\n        request.searchWeather(autocompleteCity, degrees, render.renderWeather);\r\n      }\r\n    });\r\n\r\n\r\n  selectors.input.addEventListener('keyup', (event) => {\r\n    if (event.keyCode === 13) {\r\n      selectors.favoriteWrapper.style.display = \"block\";\r\n      selectors.mainBlock.style.display       = \"block\";\r\n      autocomplete.style.visibility = \"hidden\";\r\n      let inputCity = selectors.input.value; //inputValue\r\n      if(inputCity.length == 0) { \r\n        console.log(\"you dont type city\"); return;\r\n      } else {\r\n        populateCityToUrl(inputCity);\r\n        selectors.input.blur();\r\n        request.searchWeather(inputCity, degrees, render.renderWeather);\r\n        }\r\n      }\r\n  });\r\n\r\n \r\n\r\n  selectors.buttonAddToFavorites.addEventListener(\"click\", (event) => {\r\n    console.log(selectors.buttonAddToFavorites) \r\n    let city = selectors.input.value;\r\n    if(selectors.input.value){    \r\n      if (storage.isCityFavorite(city) == false) {\r\n        storage.addCityActivity(city, \"add\");\r\n        render.renderModalPopup(\"City \"+selectors.input.value+\" saved!\", \"saved\");\r\n      } else {\r\n        storage.addCityActivity(city, \"remove\");\r\n        render.renderModalPopup(\"City \"+selectors.input.value+\" deleted!\", \"deleted\");\r\n      }\r\n      \r\n      \r\n    }\r\n  });\r\n  \r\n  selectors.buttonClearActivity.addEventListener(\"click\", (event) => {\r\n    storage.clearStorage();\r\n  });\r\n\r\n  selectors.forecastBlock.addEventListener(\"click\", (event) => {\r\n    render.modifyTodayBlock(event);\r\n  });\r\n\r\n  selectors.input.addEventListener(\"click\", (event) => { //if clicks input=>select text inside\r\n    autocomplete.style.visibility = \"inherit\";\r\n    selectors.input.focus();\r\n    $(selectors.input).select();\r\n  });\r\n\r\n}\r\n\r\n\r\nconst populateCityToUrl = (city) => {\r\n  //https://stackoverflow.com/a/19279428/9026103\r\n  if (history.pushState) { \r\n    var newurl = window.location.origin + window.location.pathname + \"?=\"+ city;;\r\n    window.history.pushState({ path:newurl }, '', newurl );\r\n  } \r\n}\r\n\r\nconst isCityInUrl = () => {\r\n  let cityFromUrl = decodeURI(location.search.substring(2))\r\n  return (cityFromUrl.length > 0) ? cityFromUrl : null;\r\n}"]}