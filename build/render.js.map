{"version":3,"sources":["render.js"],"names":["selectors","getWeatherIcon","storage","renderWeather","data","typedCity","query","results","renderModalPopup","addCityActivity","weather","channel","date","Date","created","renderMainBlock","forecast","item","renderForecastDaysBlocks","text","type","modalPopupBlock","classList","add","innerHTML","style","opacity","zIndex","setTimeout","remove","input","value","focus","buildDayBlock","obj","day","document","createElement","substring","code","high","low","nextDays","forecastBlock","forEach","appendChild","convertToCelcius","F","checkIsCityInFavorites","isCityFavorite","buttonAddToFavorites","className","mainCity","location","country","region","mainTime","toLocaleString","mainIcon","condition","mainTemp","temp","mainInfo","Math","ceil","wind","chill","atmosphere","humidity","setAnimationAppearing","el","delay","animation","modifyTodayBlock","event","path","find","contains","now","querySelector","innerText","getFullYear","toLocaleDateString","firstChild","cities","citiesInStorage","list","buildRecentCities","recentBlock","length","city","name","searchTimes","buildFavoriteCities","favoriteBlock","filter","favorite","renderCities"],"mappings":"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","file":"render.js","sourcesContent":["import { selectors } from './inc/_selectors.js'\r\nimport { getWeatherIcon } from './inc/_lib.js'\r\nimport * as storage  from './storage.js'\r\n\r\nexport const renderWeather = (data, typedCity) => {\r\n  if(data.query.results === null){ \r\n    renderModalPopup(\"This city is <br><br> not supported\", \"error\");\r\n    \r\n  } \r\n  else {\r\n    storage.addCityActivity(typedCity);\r\n    let weather = data.query.results.channel;\r\n    let date = new Date(data.query.created);\r\n    renderMainBlock(weather, date, typedCity);\r\n\r\n    let forecast = weather.item.forecast;\r\n    renderForecastDaysBlocks(forecast); \r\n  } \r\n}\r\n\r\nexport const renderModalPopup = (text, type) => {\r\n  selectors.modalPopupBlock.classList.add(type);\r\n  selectors.modalPopupBlock.innerHTML = `<div class=\"message\">${text}</div>`;\r\n  selectors.modalPopupBlock.style.opacity = \"1\";\r\n  selectors.modalPopupBlock.style.zIndex = \"100\";\r\n  setTimeout(() => {\r\n    selectors.modalPopupBlock.style.opacity = \"0\";\r\n    selectors.modalPopupBlock.style.zIndex = \"-100\";\r\n    selectors.modalPopupBlock.classList.remove(type);\r\n    if (type == \"error\"){\r\n      selectors.input.value = \"\";\r\n      selectors.input.focus()\r\n    }\r\n  }, 800)\r\n}\r\n\r\n\r\n\r\n\r\nconst buildDayBlock = (obj) => {\r\n  let day = document.createElement(\"div\");\r\n  day.classList.add(\"forecast-days-item\");\r\n  day.innerHTML = `<span class=\"days-date\">${obj.date.substring(0,7)}</span>\r\n                   <span class=\"days-icon\">${getWeatherIcon(obj.code)}</span>\r\n                   <span class=\"days-high\">${obj.high}&deg;</span>\r\n                   <span class=\"days-low\" >${obj.low}&deg;</span><br>\r\n                   <span class=\"days-text\">${obj.text}</span>`;\r\n  return day;\r\n}\r\n\r\nconst renderForecastDaysBlocks = (nextDays) => {\r\n  selectors.forecastBlock.innerHTML = \"\";\r\n  nextDays.forEach((obj) => {  \r\n    let day = buildDayBlock(obj);\r\n    selectors.forecastBlock.appendChild(day);\r\n  });\r\n}\r\n\r\nconst convertToCelcius = (F) => {\r\n  return (5/9) * (F - 32);\r\n}\r\nexport const checkIsCityInFavorites = (typedCity) => {\r\n  // let city = storage.searchCity(typedCity);\r\n  if(storage.isCityFavorite(typedCity)) { \r\n    selectors.buttonAddToFavorites.className = \"fa fa-heart\";\r\n  } else {\r\n    selectors.buttonAddToFavorites.className = \"fa fa-heart-o\";\r\n  }\r\n}\r\n\r\nconst renderMainBlock = (obj, date, typedCity) => {\r\n  checkIsCityInFavorites(typedCity);\r\n  selectors.mainCity.innerHTML = obj.location.country +\", \"+ obj.location.region;\r\n  selectors.mainTime.innerHTML = date.toLocaleString('ru-RU');\r\n  selectors.mainIcon.innerHTML = getWeatherIcon(obj.item.condition.code);\r\n  selectors.mainTemp.innerHTML = obj.item.condition.temp + \"&deg;\";\r\n  selectors.mainInfo.innerHTML = \r\n     `<span class=\"condition\">${obj.item.condition.text}</span> <br> \r\n      <span class=\"addition\">\r\n        Fill: ${Math.ceil(convertToCelcius(obj.wind.chill))} C&deg;<br>\r\n        Hudimity: ${obj.atmosphere.humidity}%\r\n      </span>`;\r\n}\r\n\r\nconst setAnimationAppearing = (el, delay) => {\r\n  el.style.animation = \"appearing .\"+delay+\"s ease-out\";\r\n  setTimeout(() => {\r\n    el.style.animation = \"none\";\r\n  }, delay);\r\n}\r\n\r\nexport const modifyTodayBlock = (event) => {\r\n  let el = event.path.find((el) => {return el.classList.contains(\"forecast-days-item\"); });\r\n  let now = new Date();\r\n  let date = new Date(el.querySelector(\".days-date\").innerText +\" \"+ now.getFullYear());\r\n  selectors.mainTime.innerHTML = date.toLocaleDateString('ru-RU');\r\n  setAnimationAppearing(selectors.mainTime, 400);\r\n  selectors.mainIcon.firstChild.className = el.querySelector(\".days-icon\").firstChild.className;\r\n  setAnimationAppearing(selectors.mainIcon.firstChild, 400);\r\n  selectors.mainTemp.innerHTML = el.querySelector(\".days-high\").innerText;\r\n  setAnimationAppearing(selectors.mainTemp, 400);\r\n  selectors.mainInfo.querySelector(\".condition\").innerHTML = el.querySelector(\".days-text\").innerText;\r\n  setAnimationAppearing(selectors.mainInfo, 400);\r\n  selectors.mainInfo.querySelector(\".addition\").innerHTML = \"\";\r\n}\r\n\r\nlet cities = storage.citiesInStorage.list;\r\n\r\nexport const buildRecentCities = () => {\r\n  selectors.recentBlock.innerHTML = \"\";\r\n  if(cities.length) {\r\n  cities.forEach((city) => {\r\n    selectors.recentBlock.innerHTML += \r\n          `<a href=\"?=${city.name}\" class=\"recent\">\r\n              ${city.name}<sup>(${city.searchTimes})</sup>\r\n          </a>`;\r\n    });\r\n  }\r\n}\r\n\r\nconst buildFavoriteCities = () => {\r\n  selectors.favoriteBlock.innerHTML = \"\";\r\n  if(cities.length) {\r\n    cities.filter((obj) => { return obj.favorite == true;})\r\n    .forEach((city) => {\r\n      selectors.favoriteBlock.innerHTML += \r\n            `<a href=\"?=${city.name}\" class=\"favorite\">\r\n                ${city.name}<sup>(${city.searchTimes})</sup>\r\n            </a>`;\r\n      });\r\n }\r\n}\r\n\r\nexport const renderCities = () => {\r\n  buildRecentCities()\r\n  buildFavoriteCities();\r\n}\r\n"]}